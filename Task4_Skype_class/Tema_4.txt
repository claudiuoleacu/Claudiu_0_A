Cerințe comune tuturor temelor (barem):
	1. Toate clasele vor conține obligatoriu constructori de inițializare (0.25p), parametrizați (0.25p) și de copiere (0.25p); destructor (0.25p); operatorii „=” (0.5p), „>>” (0.5p), „<<” (0.5p) supraîncărcați corespunzător, moșteniri & encapsulare (0.5p)
	2. Clasele derivate trebuie sa contina constructori parametrizati (prin care sa se evidentieze transmiterea parametrilor catre constructorul din clasa de baza) si destructori. (1p)
	3. În fiecare proiect vor fi ilustrate conceptele de upcasting, downcasting, funcții virtuale (pure – unde se consideră mai natural) – 1.5p (0.5p / cerință)
	4. Utilizarea de variabile și de funcții statice – 1p
	5. Citirea informațiilor complete a n obiecte, memorarea și afișarea acestora – 0.5p
	6. Meniu interactiv – 0.5p
	7. Rezolvarea corectă a cerințelor suplimentare corespunzatoare fiecarei teme – 1.5p.
Se acordă punctaje parțiale corespunzător și 1p oficiu.
	- Dacă sursa nu compilează, se acorda nota 1 (punctul din oficiu).
	- După expirarea termenului limită se mai pot trimite teme pe mail pentru o perioadă de grație de 2 zile (48 de ore).
Pentru fiecare zi parțială de întârziere se vor scădea 2 puncte. După expirarea termenului de grație, proiectele nu vor fi acceptate și vor fi notate cu 0. 
Punctul din oficiu este primit doar dacă a fost trimis proiectul în perioada limită + perioada de grație.

Tema 4. Se dau urmatoarele clase:
	- Clasa Persoana(int id, string nume)
	- Clasa Abonat:Persoana(string nr_telefon)
	- Clasa Abonat_Skype: Abonat (string id_skype)
	- Clasa Abonat_Skype_Romania (string adresa_mail) : Abonat_Skype
	- Clasa Abonat_Skype_Extern(string tara) : Abonat_Skype
Sa se construiasca clasa Agenda ce contina o lista de abonati si sa se 
supraincarce operatorul [ ](indexare)care returneaza abonatul cu numele
precizat.